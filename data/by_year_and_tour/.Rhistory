library(dplyr)
library(ggplot2)
library(ggthemes)
library(cowplot)
options(scipen = 999)
point_extract_func <- function(x){
stringr::str_extract_all(x, '\\d{1,2}') %>%
lapply(as.numeric) %>%
lapply(sum) %>%
unlist() %>%
return(.)
}
# setwd('/Users/adamvagner/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
setwd('/Users/adamv/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
player_matches_for_tableau <- data.table::fread('../Data/player_matches_for_tableau.csv') %>% as.data.frame()
player_matches_for_tableau <- player_matches_for_tableau %>%
filter(circuit == 'AVP' &
bracket != 'Qualifier Bracket' &
date >= '2014-01-01')
player_matches_for_tableau2 <- player_matches_for_tableau %>% filter(!grepl('[a-zA-Z]', score))
player_matches_for_tableau2 %>% sample_n(10) %>% select(score) %>% mutate(points = point_extract_func(score))
player_matches_for_tableau2 <- player_matches_for_tableau2 %>%
mutate(total_aces = tot_aces_p1 + tot_aces_p2,
total_serve_errors = tot_serve_errors_p1 + tot_serve_errors_p2,
opponent_sideout_pct = (tot_kills_p3 + tot_kills_p4 - tot_errors_p3 - tot_errors_p4) / (tot_attacks_p3 + tot_attacks_p4),
total_points = point_extract_func(score)) %>%
mutate(ace_error_ratio = total_aces / ifelse(total_serve_errors == 0, 1, total_serve_errors),
ace_pct_tot_points = total_aces / total_points,
serve_error_pct_tot_points = total_serve_errors / total_points) %>%
filter(opponent_sideout_pct < 1)
head(player_matches_for_tableau2 %>% select(team_1, team_2, team_won, total_aces:serve_error_pct_tot_points))
player_matches_for_tableau2 %>%
sample_n(1000) %>%
ggplot(aes(x = total_aces, y = total_serve_errors, color = factor(team_won))) +
geom_jitter(alpha = .5) +
theme_light()
player_matches_for_tableau2 %>%
sample_n(500) %>%
ggplot(aes(x = opponent_sideout_pct, y = total_serve_errors, color = factor(team_won))) +
geom_jitter(alpha = .5) +
labs(color = 'Team Won') +
theme_light()
player_matches_for_tableau2 %>%
sample_n(800) %>%
ggplot(aes(x = opponent_sideout_pct, y = ace_error_ratio, color = factor(team_won))) +
geom_jitter(alpha = .5, height = .1) +
labs(color = 'Team Won') +
ylim(c(-.1, 4)) +
theme_light()
player_matches_for_tableau3 <- player_matches_for_tableau2 %>%
group_by(team_1, team_2, team_won, tournament, year, match_num, bracket) %>%
slice(1) %>%
ungroup() %>%
as.data.frame()
head(player_matches_for_tableau3)
player_matches_for_tableau3 %>%
sample_n(1000) %>%
ggplot(aes(x = total_aces, y = total_serve_errors, color = factor(team_won))) +
geom_jitter(alpha = .5) +
theme_light()
player_matches_for_tableau3 %>%
sample_n(500) %>%
ggplot(aes(x = opponent_sideout_pct, y = total_aces, color = factor(team_won))) +
geom_jitter(alpha = .5) +
labs(color = 'Team Won') +
theme_light()
player_matches_for_tableau3 %>%
sample_n(800) %>%
ggplot(aes(x = opponent_sideout_pct, y = ace_error_ratio, color = factor(team_won))) +
geom_jitter(alpha = .5, height = .1) +
labs(color = 'Team Won') +
ylim(c(-.1, 4)) +
theme_light()
library(e1071)
fit <- svm(factor(team_won) ~ ace_error_ratio + opponent_sideout_pct,
data = player_matches_for_tableau3, type = "C-classification", kernel = "linear", cost = 1, scale = FALSE)
detalization <- 1000
grid <- expand.grid(seq(from = 0,to = 1, length.out = detalization),
seq(from = 0,to = 4, length.out = detalization))
names(grid) <- c('opponent_sideout_pct', 'ace_error_ratio')
preds <- predict(fit, grid)
df <- data.frame(grid, preds)
head(df)
df[1:100, ]
df[which(diff(as.numeric(df$preds)) == -1)[1],] %>% select(1,2)
df[which(diff(as.numeric(df$preds)) == -1)[length(which(diff(as.numeric(df$preds)) == -1))], ]%>% select(1,2)
line_part <- rbind.data.frame(
df[which(diff(as.numeric(df$preds)) == -1)[1],] %>% select(1,2),
df[which(diff(as.numeric(df$preds)) == -1)[length(which(diff(as.numeric(df$preds)) == -1))], ] %>% select(1,2)
)
ggplot(df, aes(x = opponent_sideout_pct, y = ace_error_ratio, fill = preds)) +
geom_tile(alpha = .5)
set.seed(123)
data_plot <- player_matches_for_tableau3 %>%
sample_n(800)
ggplot() +
geom_jitter(data = data_plot, aes(x = opponent_sideout_pct, y = ace_error_ratio, color = factor(team_won)), alpha = .6, height = .1) +
geom_tile(data = df, aes(x = opponent_sideout_pct, y = ace_error_ratio, fill = preds), alpha = .2) +
geom_line(data = line_part, aes(x = opponent_sideout_pct, y = ace_error_ratio), color = 'black', alpha = .8, size = 1.4) +
labs(color = 'Team Won', fill = 'Team Won') +
ylim(c(-.1, 4)) +
xlim(c(0, 1)) +
theme_light()
slope = (line_part[2,2] - line_part[1,2]) / (line_part[2,1] - line_part[1,1])
slope
y_int = line_part[1,2] - slope * line_part[1,1]
y_int
library(e1071)
fit2 <- svm(factor(team_won) ~ total_aces + opponent_sideout_pct, data = player_matches_for_tableau3, type = "C-classification", kernel = "linear", cost = 1, scale = FALSE)
detalization <- 1000
grid2 <- expand.grid(seq(from = 0,to = 1, length.out = detalization),
seq(from = 0,to = 10, length.out = detalization))
names(grid2) <- c('opponent_sideout_pct', 'total_aces')
head(grid2)
fit
View(fit)
fit$terms
str(fit$terms)
fit$terms$variables
fit$terms$response
library(dplyr)
setwd('/Users/adamvagner/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
setwd('/Users/adamv/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
# setwd('/Users/adamv/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
files <- list.files('../Data/')
files
files <- grep('match_update|match_archive', files, value = TRUE)
files
matches_for_tableau <- list()
for(i in 1:length(files)){
matches_for_tableau[[i]] <- readr::read_csv(paste0('../Data/', files[i]),
col_types = 'ccciDcicDnnccDnncccDnnccDnnccccccnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn')
}
matches_for_tableau <- data.table::rbindlist(matches_for_tableau) %>% data.frame()
matches_for_tableau
source('~/Google Drive/BigTimeStats/BVB Info Scrape/Data/By_Year/save_by_year.r', echo=TRUE)
setwd('/Users/adamv/Google Drive/BigTimeStats/BVB Info Scrape/Scripts/')
source('~/Google Drive/BigTimeStats/BVB Info Scrape/Data/By_Year/save_by_year.r', echo=TRUE)
setwd('../Data/By_Year/)
setwd('../Data/By_Year/')
getwd()
matches_for_tableau <- data.table::rbindlist(matches_for_tableau) %>% data.frame()
years <- matches_for_tableau %>% select(year) %>% distinct()
years
for(i in years){
print(i)
temp <- matches_for_tableau %>% filter(year == i)
write.csv(temp, paste0(i,'.csv'), na = '', row.names = FALSE)
}
matches_for_tableau
years
years <- matches_for_tableau %>% select(year) %>% distinct() %>% .[[]]
years
years <- matches_for_tableau %>% select(year) %>% distinct() %>% .[]
years
years <- matches_for_tableau %>% select(year) %>% distinct() %>% .[[]]
years <- matches_for_tableau %>% select(year) %>% distinct() %>% .[[1]]
years
for(i in years){
print(i)
temp <- matches_for_tableau %>% filter(year == i)
write.csv(temp, paste0(i,'.csv'), na = '', row.names = FALSE)
}
years
years
years
matches_for_tableau %>% select(year) %>% distinct() %>% .[[1]]
matches_for_tableau %>% select(year) %>% distinct()
head(matches_for_tableau)
circuit <- matches_for_tableau %>% select(circuit) %>% distinct() %>% .[[1]]
circuit
setwd('../Data/By_Circuit_Year/')
setwd('../Data/By_Circuit_Year/')
setwd('../By_Circuit_Year/')
for(i in years){
cat(i)
for(j in circuit){
cat('.')
temp <- matches_for_tableau %>% filter(year == i & circuit == j)
write.csv(temp, paste0(j, '_', i,'.csv'), na = '', row.names = FALSE)
}
cat('\n')
}
for(i in years){
cat(i)
for(j in circuit){
cat('.')
temp <- matches_for_tableau %>% filter(year == i & circuit == j)
if(nrow(temp) == 0){
next
}
write.csv(temp, paste0(j, '_', i,'.csv'), na = '', row.names = FALSE)
}
cat('\n')
}
